{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "Cybert Threat Agregator Design Document",
			"settings":
			{
				"buffer_size": 993,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "Cybert Threat Design Document"
			}
		},
		{
			"contents": "#!/usr/bin/env python3\n\n# cta.py is used to search mostly open-source resousrces for suspicious \n# strings.  The goal being that allow a single point for searching many \n# sources and providing the output in CSV format.\n#\n# Copyright (C) 2016 Matthew Aubert\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with\n# this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# https://github.com/aubsec/cta.git\n# https://twitter.com/aubsec\n# https://aubsec.github.io\n\n# Imports\nimport argparse\nfrom argparse import RawTextHelpFormatter\nimport configparser\nimport datetime\nimport hashlib\nimport os\nimport sys\nimport tempfile\nimport urllib.request\nimport zipfile\n\ndef argument_parser():\n    try:\n        parser = argparse.ArgumentParser(description=\"\"\"\nCybert Threat Aggregator\ncta.py takes as input a text file of hashes or strings,  or a single \nhash value or string and performs a searh of various sources.  The purpose of \nthis application is to identify of the strings are known by threat intelligence\nsources.  The application will output to the stdout all findings in CSV format.\n\nExample 1:  cta.py -s 0d1ef429ed4a31753e5905e5356ba94d\nExample 2:  cta.py -s kernel32.dll\nExample 3:  cta.py -s File-Of-Strings.txt\n\nIt may also be beneficial to redirect the stdout to to a csv file like in the \nexample below.\n\nExample 4:  cta.py -s kernel32.dll > out.csv\n\n\nhttps://github.com/aubsec/cta.git\nhttps://twitter.com/aubsec\nhttps://aubsec.github.io\"\"\", formatter_class=RawTextHelpFormatter)\n\n\n        parser.add_argument(\"-s\", \"--string\", help=\"\"\"\nRequired. Specify a single hash value, string, or file of strings to \nsearch.\"\"\", required=True)\n\n        args = parser.parse_args()\n\n# These are here for debugging purposes.\n        sys.stderr.write(\"[+] String being parsed: \" + str(args.string) + \"\\n\")\n\n        return(args)\n\n    except Exception as exceptValue:\n        exception_handler(exceptValue, exceptFunction)\n\n\ndef argument_tester(args):\n    try:\n        \n\n\n# Reads the keys.conf file and passes execution to appropriate Class.\n#def config_parser():\n#   try:\n#       with open(\"keys.conf\", \"r\") as config:\n#           for line in config:\n\n\n# function exception_handler():\n# Collects error codes and prints to screen\ndef exception_handler(exceptValue, exceptFunction):\n    sys.stderr.write(\"[!] An exception has occured in \" + str(exceptFunction) \\\n        + \"\\n\")\n    sys.stderr.write(\"[!] \" + str(exceptValue) + \"\\n\")\n    exit(1)\n\n\n# function Main():\ndef main():\n    argument_parser()\n\n# Sets default exception values.\n    exceptFunction = \"main()\"\n    exceptValue = None\n\n# Executes primary purpose of application.\n    try:\n# Instantiates object based on class NSRLDownload() and calls method GetNSRL().\n#        nsrl = NsrlLookup()\n#        \n#        exceptValue,exceptFunction = nsrl.getNsrl()\n\n# If program completed sucessfully, write sucess message to stderr and exit with 0.\n        sys.stderr.write(\"[+] Program completed sucessfully.\\n\")\n        exit(0)\n\n# If execution fails, collects errors and passes them to the ExeceptionHandler() function.\n    except Exception as exceptValue:\n        exception_handler(exceptValue, exceptFunction)\n\nif __name__==\"__main__\":\n    main()\n",
			"file": "cta.py",
			"file_size": 3666,
			"file_write_time": 131225793610000000,
			"settings":
			{
				"buffer_size": 3713,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/maaubert/git/hashsearch/hashsearch.py",
			"settings":
			{
				"buffer_size": 10615,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/maaubert/Library/Application Support/Sublime Text 3/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
			"settings":
			{
				"buffer_size": 479,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 267.0,
		"last_filter": "pep",
		"selected_items":
		[
			[
				"pep",
				"User: Python PEP8 Autoformat"
			],
			[
				"Package Control",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/maaubert/git/hashsearch/hashsearch.py",
		"/Users/maaubert/Documents/Cases/ir160055/Logs/Images/notes/26/26memdump.mem.services.txt",
		"/Users/maaubert/MEGAsync Downloads/Case/26memdump.mem.filescan.txt",
		"/Users/maaubert/Documents/Cases/ir160055/adminsilro001.txt",
		"/Users/maaubert/Documents/Cases/ir160055/37.59.10.134.txt",
		"/Users/maaubert/Documents/Cases/ir160055/CTNGwbqqtomlxOmF.txt"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"'",
			"exception_halder",
			"ExceptionHandler",
			"hashsearch",
			"2222.exe",
			"ComputerName"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Cybert Threat Agregator Design Document",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 993,
						"regions":
						{
						},
						"selection":
						[
							[
								275,
								275
							]
						],
						"settings":
						{
							"auto_name": "Cybert Threat Design Document",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "cta.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3713,
						"regions":
						{
						},
						"selection":
						[
							[
								2483,
								2483
							]
						],
						"settings":
						{
							"rulers":
							[
								78
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true,
							"wrap_width": 78
						},
						"translation.x": 0.0,
						"translation.y": 870.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/maaubert/git/hashsearch/hashsearch.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10615,
						"regions":
						{
						},
						"selection":
						[
							[
								7023,
								6503
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2236.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/maaubert/Library/Application Support/Sublime Text 3/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 479,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "cta.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 167.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
